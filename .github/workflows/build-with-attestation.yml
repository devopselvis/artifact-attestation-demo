name: Build, Attest, and Verify

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for attestations
permissions:
  contents: read
  id-token: write
  attestations: write
  actions: read

jobs:
  build-and-attest:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact-name.outputs.artifact-name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Build package
      run: npm pack
      
    - name: Set artifact name output
      id: set-artifact-name
      run: |
        ARTIFACT_FILE=$(ls *.tgz | head -1)
        echo "artifact-name=$ARTIFACT_FILE" >> $GITHUB_OUTPUT
        echo "📦 Created artifact: $ARTIFACT_FILE"
        
    - name: List built artifacts
      run: |
        echo "📋 Built artifacts:"
        ls -la *.tgz
        
    - name: Generate attestation
      uses: actions/attest-build-provenance@v3.0.0
      with:
        subject-path: '*.tgz'
        
    - name: Upload artifact with attestation
      uses: actions/upload-artifact@v4
      with:
        name: npm-package-with-attestation
        path: '*.tgz'
        retention-days: 30

  verify-attestation:
    runs-on: ubuntu-latest
    needs: build-and-attest
    if: always() && needs.build-and-attest.result == 'success'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: npm-package-with-attestation
        path: ./downloaded-artifacts
        
    - name: List downloaded artifacts
      run: |
        echo "📋 Downloaded artifacts:"
        ls -la ./downloaded-artifacts/
        
    - name: Move artifacts to current directory
      run: |
        mv ./downloaded-artifacts/*.tgz ./
        echo "📦 Artifacts in current directory:"
        ls -la *.tgz
        
    - name: Verify attestation
      run: |
        echo "🔐 Verifying attestation for artifact..."
        ARTIFACT_FILE="${{ needs.build-and-attest.outputs.artifact-name }}"
        echo "Verifying: $ARTIFACT_FILE"
        
        # Verify the attestation
        if gh attestation verify "$ARTIFACT_FILE" --repo "${{ github.repository }}"; then
          echo "✅ Attestation verification PASSED!"
        else
          echo "❌ Attestation verification FAILED!"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Validate attestation claims
      run: |
        echo "🔍 Validating specific attestation claims..."
        ARTIFACT_FILE="${{ needs.build-and-attest.outputs.artifact-name }}"
        
        # Extract key information from attestation
        REPO_URL_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.repository')
        WORKFLOW_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path')
        REF_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.ref')
        
        # Extract repository name from URL (remove https://github.com/ prefix)
        REPO_FROM_ATTESTATION="${REPO_URL_FROM_ATTESTATION#https://github.com/}"
        
        echo "Validating repository: $REPO_FROM_ATTESTATION (from $REPO_URL_FROM_ATTESTATION)"
        echo "Validating workflow: $WORKFLOW_FROM_ATTESTATION"
        echo "Validating ref: $REF_FROM_ATTESTATION"
        
        # Validate repository matches
        if [[ "$REPO_FROM_ATTESTATION" == "${{ github.repository }}" ]]; then
          echo "✅ Repository validation PASSED"
        else
          echo "❌ Repository validation FAILED: Expected ${{ github.repository }}, got $REPO_FROM_ATTESTATION"
          exit 1
        fi
        
        # Validate workflow path
        if [[ "$WORKFLOW_FROM_ATTESTATION" == *"build-with-attestation.yml"* ]]; then
          echo "✅ Workflow validation PASSED"
        else
          echo "❌ Workflow validation FAILED: Unexpected workflow $WORKFLOW_FROM_ATTESTATION"
          exit 1
        fi
        
        # Validate ref matches current context
        EXPECTED_REF="refs/heads/${{ github.ref_name }}"
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          EXPECTED_REF="refs/pull/${{ github.event.number }}/merge"
        fi
        
        echo "Expected ref: $EXPECTED_REF"
        if [[ "$REF_FROM_ATTESTATION" == "$EXPECTED_REF" ]] || [[ "$REF_FROM_ATTESTATION" == "${{ github.ref }}" ]]; then
          echo "✅ Ref validation PASSED"
        else
          echo "⚠️  Ref validation WARNING: Expected $EXPECTED_REF, got $REF_FROM_ATTESTATION"
          # Don't fail on ref mismatch as it can vary in different contexts
        fi
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Validate attestation claims
      run: |
        echo "🔍 Validating specific attestation claims..."
        ARTIFACT_FILE="${{ needs.build-and-attest.outputs.artifact-name }}"
        
        # Extract key information from attestation
        REPO_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.repository')
        WORKFLOW_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path')
        REF_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.ref')
        
        echo "Validating repository: $REPO_FROM_ATTESTATION"
        echo "Validating workflow: $WORKFLOW_FROM_ATTESTATION"
        echo "Validating ref: $REF_FROM_ATTESTATION"
        
        # Validate repository matches
        if [[ "$REPO_FROM_ATTESTATION" == "${{ github.repository }}" ]]; then
          echo "✅ Repository validation PASSED"
        else
          echo "❌ Repository validation FAILED: Expected ${{ github.repository }}, got $REPO_FROM_ATTESTATION"
          exit 1
        fi
        
        # Validate workflow path
        if [[ "$WORKFLOW_FROM_ATTESTATION" == *"build-and-verify-attestation.yml"* ]]; then
          echo "✅ Workflow validation PASSED"
        else
          echo "❌ Workflow validation FAILED: Unexpected workflow $WORKFLOW_FROM_ATTESTATION"
          exit 1
        fi
        
        # Validate ref matches current context
        EXPECTED_REF="refs/heads/${{ github.ref_name }}"
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          EXPECTED_REF="refs/pull/${{ github.event.number }}/merge"
        fi
        
        echo "Expected ref: $EXPECTED_REF"
        if [[ "$REF_FROM_ATTESTATION" == "$EXPECTED_REF" ]] || [[ "$REF_FROM_ATTESTATION" == "${{ github.ref }}" ]]; then
          echo "✅ Ref validation PASSED"
        else
          echo "⚠️  Ref validation WARNING: Expected $EXPECTED_REF, got $REF_FROM_ATTESTATION"
          # Don't fail on ref mismatch as it can vary in different contexts
        fi
        
    - name: Upload attestation details
      uses: actions/upload-artifact@v4
      with:
        name: attestation-verification-results
        path: attestation-details.json
        retention-days: 30
        
    - name: Summary
      run: |
        echo "🎉 Attestation verification workflow completed successfully!"
        echo ""
        echo "📊 Summary:"
        echo "- Artifact: ${{ needs.build-and-attest.outputs.artifact-name }}"
        echo "- Repository: ${{ github.repository }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Workflow: ${{ github.workflow }}"
        echo "- Run ID: ${{ github.run_id }}"
        echo ""
        echo "✅ All attestation validations passed!"
        
        # Extract attestation values for summary
        REPO_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.repository')
        WORKFLOW_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path')
        REF_FROM_ATTESTATION=$(cat attestation-details.json | jq -r '.[0].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.ref')
        
        # Write to job summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🎉 Attestation Verification Complete
        
        ## 📊 Summary
        
        | Field | Value |
        |-------|-------|
        | **Artifact** | \`${{ needs.build-and-attest.outputs.artifact-name }}\` |
        | **Repository** | \`${{ github.repository }}\` |
        | **Commit** | \`${{ github.sha }}\` |
        | **Workflow** | \`${{ github.workflow }}\` |
        | **Run ID** | \`${{ github.run_id }}\` |
        | **Date** | \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\` |
        
        ## ✅ Validation Results
        
        All attestation validations passed successfully:
        
        - ✅ **Repository validation** - Expected: \`${{ github.repository }}\`, Actual: \`${REPO_FROM_ATTESTATION}\`
        - ✅ **Workflow validation** - Workflow: \`${WORKFLOW_FROM_ATTESTATION}\`
        - ✅ **Reference validation** - Reference: \`${REF_FROM_ATTESTATION}\`
        - ✅ **Artifact integrity** - Build artifact attestation verified
        
        The build artifact has been successfully verified with cryptographic attestations proving its authenticity and integrity.
        
        ## 🔗 Links
        
        - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
        EOF
